openapi: 3.0.1
info:
  title: OpenAPI definition
  version: v0
servers:
- url: http://localhost:8081
  description: Generated server url
paths:
  /api/v1/customer/{customerId}:
    get:
      tags:
      - customer-controller
      operationId: getCustomerById
      parameters:
      - name: customerId
        in: path
        required: true
        schema:
          type: string
          format: uuid
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/CustomerDTO"
    put:
      tags:
      - customer-controller
      operationId: updateCustomerByID
      parameters:
      - name: customerId
        in: path
        required: true
        schema:
          type: string
          format: uuid
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CustomerDTO"
        required: true
      responses:
        "200":
          description: OK
    delete:
      tags:
      - customer-controller
      operationId: deleteCustomerById
      parameters:
      - name: customerId
        in: path
        required: true
        schema:
          type: string
          format: uuid
      responses:
        "200":
          description: OK
    patch:
      tags:
      - customer-controller
      operationId: patchCustomerById
      parameters:
      - name: customerId
        in: path
        required: true
        schema:
          type: string
          format: uuid
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CustomerDTO"
        required: true
      responses:
        "200":
          description: OK
  /api/v1/beer/{beerId}:
    get:
      tags:
      - beer-controller
      operationId: getBeerById
      parameters:
      - name: beerId
        in: path
        required: true
        schema:
          type: string
          format: uuid
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/BeerDTO"
    put:
      tags:
      - beer-controller
      operationId: updateById
      parameters:
      - name: beerId
        in: path
        required: true
        schema:
          type: string
          format: uuid
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/BeerDTO"
        required: true
      responses:
        "200":
          description: OK
    delete:
      tags:
      - beer-controller
      operationId: deleteById
      parameters:
      - name: beerId
        in: path
        required: true
        schema:
          type: string
          format: uuid
      responses:
        "200":
          description: OK
    patch:
      tags:
      - beer-controller
      operationId: updateBeerPatchById
      parameters:
      - name: beerId
        in: path
        required: true
        schema:
          type: string
          format: uuid
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/BeerDTO"
        required: true
      responses:
        "200":
          description: OK
  /api/v1/customer:
    get:
      tags:
      - customer-controller
      operationId: listAllCustomers
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/CustomerDTO"
    post:
      tags:
      - customer-controller
      operationId: handlePost
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CustomerDTO"
        required: true
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/HttpHeaders"
  /api/v1/beer:
    get:
      tags:
      - beer-controller
      operationId: listBeers
      parameters:
      - name: beerName
        in: query
        required: false
        schema:
          type: string
      - name: beerStyle
        in: query
        required: false
        schema:
          type: string
          enum:
          - LAGER
          - PILSNER
          - STOUT
          - GOSE
          - PORTER
          - ALE
          - WHEAT
          - IPA
          - PALE_ALE
          - SAISON
      - name: showInventory
        in: query
        required: false
        schema:
          type: boolean
      - name: pageNumber
        in: query
        required: false
        schema:
          type: integer
          format: int32
      - name: pageSize
        in: query
        required: false
        schema:
          type: integer
          format: int32
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/PagedModelBeerDTO"
    post:
      tags:
      - beer-controller
      operationId: handlePost_1
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/BeerDTO"
        required: true
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/HttpHeaders"
components:
  schemas:
    CustomerDTO:
      type: object
      properties:
        id:
          type: string
          format: uuid
        name:
          type: string
        version:
          type: integer
          format: int32
        createdDate:
          type: string
          format: date-time
        updateDate:
          type: string
          format: date-time
    BeerDTO:
      required:
      - beerName
      - beerStyle
      - price
      - upc
      type: object
      properties:
        id:
          type: string
          format: uuid
        version:
          type: integer
          format: int32
        beerName:
          type: string
        beerStyle:
          type: string
          enum:
          - LAGER
          - PILSNER
          - STOUT
          - GOSE
          - PORTER
          - ALE
          - WHEAT
          - IPA
          - PALE_ALE
          - SAISON
        upc:
          type: string
        quantityOnHand:
          type: integer
          format: int32
        price:
          type: number
        createdDate:
          type: string
          format: date-time
        updateDate:
          type: string
          format: date-time
    ContentDisposition:
      type: object
      properties:
        type:
          type: string
        name:
          type: string
        filename:
          type: string
        charset:
          type: string
        size:
          type: integer
          format: int64
          deprecated: true
        creationDate:
          type: string
          format: date-time
          deprecated: true
        modificationDate:
          type: string
          format: date-time
          deprecated: true
        readDate:
          type: string
          format: date-time
          deprecated: true
        formData:
          type: boolean
        inline:
          type: boolean
        attachment:
          type: boolean
    HttpHeaders:
      type: object
      properties:
        contentType:
          $ref: "#/components/schemas/MediaType"
        origin:
          type: string
        empty:
          type: boolean
        location:
          type: string
          format: uri
        host:
          type: object
          properties:
            address:
              type: object
              properties:
                hostAddress:
                  type: string
                address:
                  type: string
                  format: byte
                hostName:
                  type: string
                linkLocalAddress:
                  type: boolean
                multicastAddress:
                  type: boolean
                anyLocalAddress:
                  type: boolean
                loopbackAddress:
                  type: boolean
                siteLocalAddress:
                  type: boolean
                mcglobal:
                  type: boolean
                mcnodeLocal:
                  type: boolean
                mclinkLocal:
                  type: boolean
                mcsiteLocal:
                  type: boolean
                mcorgLocal:
                  type: boolean
                canonicalHostName:
                  type: string
            port:
              type: integer
              format: int32
            unresolved:
              type: boolean
            hostName:
              type: string
            hostString:
              type: string
        all:
          type: object
          additionalProperties:
            type: string
          writeOnly: true
        lastModified:
          type: integer
          format: int64
        date:
          type: integer
          format: int64
        contentLength:
          type: integer
          format: int64
        ifModifiedSince:
          type: integer
          format: int64
        connection:
          type: array
          items:
            type: string
        accept:
          type: array
          items:
            $ref: "#/components/schemas/MediaType"
        allow:
          uniqueItems: true
          type: array
          items:
            $ref: "#/components/schemas/HttpMethod"
        etag:
          type: string
        vary:
          type: array
          items:
            type: string
        pragma:
          type: string
        upgrade:
          type: string
        ifMatch:
          type: array
          items:
            type: string
        expires:
          type: integer
          format: int64
        range:
          type: array
          items:
            $ref: "#/components/schemas/HttpRange"
        contentDisposition:
          $ref: "#/components/schemas/ContentDisposition"
        acceptCharset:
          type: array
          items:
            type: string
        accessControlAllowCredentials:
          type: boolean
        accessControlAllowOrigin:
          type: string
        accessControlRequestHeaders:
          type: array
          items:
            type: string
        accessControlExposeHeaders:
          type: array
          items:
            type: string
        accessControlRequestMethod:
          $ref: "#/components/schemas/HttpMethod"
        accessControlAllowMethods:
          type: array
          items:
            $ref: "#/components/schemas/HttpMethod"
        accessControlAllowHeaders:
          type: array
          items:
            type: string
        cacheControl:
          type: string
        contentLanguage:
          type: object
          properties:
            language:
              type: string
            displayName:
              type: string
            country:
              type: string
            variant:
              type: string
            script:
              type: string
            unicodeLocaleAttributes:
              uniqueItems: true
              type: array
              items:
                type: string
            unicodeLocaleKeys:
              uniqueItems: true
              type: array
              items:
                type: string
            displayLanguage:
              type: string
            displayScript:
              type: string
            displayCountry:
              type: string
            displayVariant:
              type: string
            extensionKeys:
              uniqueItems: true
              type: array
              items:
                type: string
            iso3Language:
              type: string
            iso3Country:
              type: string
        acceptLanguage:
          type: array
          items:
            type: object
            properties:
              range:
                type: string
              weight:
                type: number
                format: double
        basicAuth:
          type: string
          writeOnly: true
        acceptPatch:
          type: array
          items:
            $ref: "#/components/schemas/MediaType"
        ifNoneMatch:
          type: array
          items:
            type: string
        bearerAuth:
          type: string
          writeOnly: true
        accessControlMaxAge:
          type: integer
          format: int64
        acceptLanguageAsLocales:
          type: array
          items:
            type: object
            properties:
              language:
                type: string
              displayName:
                type: string
              country:
                type: string
              variant:
                type: string
              script:
                type: string
              unicodeLocaleAttributes:
                uniqueItems: true
                type: array
                items:
                  type: string
              unicodeLocaleKeys:
                uniqueItems: true
                type: array
                items:
                  type: string
              displayLanguage:
                type: string
              displayScript:
                type: string
              displayCountry:
                type: string
              displayVariant:
                type: string
              extensionKeys:
                uniqueItems: true
                type: array
                items:
                  type: string
              iso3Language:
                type: string
              iso3Country:
                type: string
        ifUnmodifiedSince:
          type: integer
          format: int64
      additionalProperties:
        type: array
        items:
          type: string
    HttpMethod:
      type: object
    HttpRange:
      type: object
    MediaType:
      type: object
      properties:
        type:
          type: string
        subtype:
          type: string
        parameters:
          type: object
          additionalProperties:
            type: string
        qualityValue:
          type: number
          format: double
        charset:
          type: string
        concrete:
          type: boolean
        wildcardType:
          type: boolean
        wildcardSubtype:
          type: boolean
        subtypeSuffix:
          type: string
    PageMetadata:
      type: object
      properties:
        size:
          type: integer
          format: int64
        number:
          type: integer
          format: int64
        totalElements:
          type: integer
          format: int64
        totalPages:
          type: integer
          format: int64
    PagedModelBeerDTO:
      type: object
      properties:
        content:
          type: array
          items:
            $ref: "#/components/schemas/BeerDTO"
        page:
          $ref: "#/components/schemas/PageMetadata"
